@page "/admin"
@using LinkBlog.Contracts
@using LinkBlog.Web.Services
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Policy = "Admin")]

@inject IPostStore PostStore
@inject ILogger<AdminHome> Logger

<PageTitle>Admin</PageTitle>

<h1>Admin page</h1>

@if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
    <p style="color: red;">Error creating post: @ErrorMessage</p>
}

@if (!string.IsNullOrWhiteSpace(SuccessMessage))
{
    <p style="color: green;">@SuccessMessage</p>
}

<EditForm Model="Post" FormName="postForm" OnValidSubmit="HandleSubmitAsync" Enhance="true">
    <div>
        <label for="PostTitle">Title: </label>
        <InputText id="PostTitle" @bind-Value="Post!.Title" />
        <br/><br/>
        <label for="ShortTitle">Short Title: </label>
        <InputText id="ShortTitle" @bind-Value="Post!.ShortTitle" />
        <br/><br/>
        <label for="PostContent">Post content: </label>
        <InputTextArea id="PostContent" @bind-Value="Post!.Contents" class="post-editor" />
        <br/><br/>
        <label for="PostLink">Link: </label>
        <InputText id="PostLink" @bind-Value="Post!.Link" />
        <br/><br/>
        <label for="LinkTitle">Link Title:</label>
        <InputText id="LinkTitle" @bind-Value="Post!.LinkTitle" />
        <br/><br/>
        <label for="PostTags">Tags (comma separated):</label>
        <InputText id="PostTags" @bind-Value="Tags" />
        <br/><br/>
    </div>
    <div>
        <button type="submit">Submit</button>
    </div>
</EditForm>

@code {
    [SupplyParameterFromForm]
    private Post? Post { get; set; }
    [SupplyParameterFromForm]
    private string? Tags { get; set; }
    private string? ErrorMessage { get; set; }
    private string? SuccessMessage { get; set; }

    protected override void OnInitialized() => Post ??= new();

    private async Task HandleSubmitAsync()
    {
        if (Post == null)
        {
            return;
        }

        // TODO: Add validation

        this.Post.Id = Guid.NewGuid().ToString();
        this.Post.Date = DateTimeOffset.UtcNow;

        // Split tags and get from database
        if (Tags != null)
        {
            List<string> tagNames = Tags.Split(',').Select(t => t.Trim()).ToList();
            List<Tag> tags = new List<Tag>();
            foreach (var tagName in tagNames.Where(t => !string.IsNullOrWhiteSpace(t)))
            {
                Tag? tag = await PostStore.GetTagAsync(tagName);
                if (tag == null)
                {
                    tag = new Tag { Name = tagName, Id = Guid.NewGuid().ToString() };
                    var success = await PostStore.CreateTagAsync(tag);
                    if (!success)
                    {
                        OnError($"Failed to create tag {tagName}");
                        return;
                    }
                }

                tags.Add(tag);
            }

            this.Post.Tags = tags;
        }

        try
        {
            bool success = await PostStore.CreatePostAsync(this.Post);

            if (success)
            {
                OnSuccess();
            }
            else
            {
                OnError("Failed to create post");
            }
        }
        catch (Exception ex)
        {
            OnError($"Failed to create post: {ex.Message}", ex);
        }
    }

    private void ClearForm()
    {
        Post = new();
        Tags = string.Empty;
        ErrorMessage = null;
        StateHasChanged();
    }

    private void OnSuccess()
    {
        SuccessMessage = "Post created successfully";
        Logger.LogInformation(SuccessMessage);
        ClearForm();
    }

    private void OnError(string message, Exception? exception = null)
    {
        ErrorMessage = message;

        if (exception != null)
        {
            Logger.LogError(exception, message);
        }
        else
        {
            Logger.LogError(message);
        }
    }
}