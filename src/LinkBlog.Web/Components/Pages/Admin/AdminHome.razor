@page "/admin"
@page "/admin/{id}"

@using LinkBlog.Abstractions
@using LinkBlog.Data
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Policy = "Admin")]

@inject IPostStore PostStore
@inject ILogger<AdminHome> Logger

@* Add trix WYSIWYG editor *@
<HeadContent>
    <link rel="stylesheet" type="text/css" href="https://unpkg.com/trix@2.0.8/dist/trix.css">
    <script type="text/javascript" src="https://unpkg.com/trix@2.0.8/dist/trix.umd.min.js"></script>
</HeadContent>

<PageTitle>Admin</PageTitle>

<h1>Admin page</h1>

@if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
    <p style="color: red;">Error creating post: @ErrorMessage</p>
}

@if (!string.IsNullOrWhiteSpace(SuccessMessage))
{
    <p style="color: green;">@SuccessMessage</p>
}

<EditForm Model="Post" FormName="postForm" OnValidSubmit="HandleSubmitAsync" Enhance="true">
    <div>
        <label for="PostTitle">Title: </label>
        <InputText id="PostTitle" @bind-Value="Post!.Title" />
        <br/><br/>
        <label for="ShortTitle">Short Title: </label>
        <InputText id="ShortTitle" @bind-Value="Post!.ShortTitle" />
        <br/><br/>
        <label for="PostContent">Post content: </label>
        <InputText id="PostContent" type="hidden" @bind-Value="Post!.Contents" />
        <trix-editor input="PostContent" class="post-editor"></trix-editor>
        <br/><br/>
        <label for="PostLink">Link: </label>
        <InputText id="PostLink" @bind-Value="Post!.Link" />
        <br/><br/>
        <label for="LinkTitle">Link Title:</label>
        <InputText id="LinkTitle" @bind-Value="Post!.LinkTitle" />
        <br/><br/>
        <label for="PostTags">Tags (comma separated):</label>
        <InputText id="PostTags" @bind-Value="Tags" />
        <br/><br/>
    </div>
    <div>
        <button type="submit">Submit</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public string? Id { get; set; }

    [SupplyParameterFromForm]
    private Post? Post { get; set; }
    [SupplyParameterFromForm]
    private string? Tags { get; set; }
    private string? ErrorMessage { get; set; }
    private string? SuccessMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Post == null && !string.IsNullOrWhiteSpace(Id))
        {
            Post ??= new();
            Console.WriteLine($"Loading post with id {Id}");
            Post = await PostStore.GetPostById(Id) ?? new Post();
            Tags = string.Join(",", Post.Tags.Select(t => t.Name));
        }

        Post ??= new();
    }

    private async Task HandleSubmitAsync()
    {
        if (Post == null)
        {
            return;
        }

        List<string> tagNames = Tags?.Split(',').Select(t => t.Trim()).ToList() ?? new();

        if (!string.IsNullOrWhiteSpace(Id))
        {
            if (await PostStore.UpdatePostAsync(Id, Post, tagNames))
            {
                OnSuccess("Post updated successfully");
            }
            else
            {
                OnError("Failed to update post");
            }

            return;
        }

        // TODO: Add validation

        this.Post.Id = Guid.NewGuid().ToString();
        this.Post.CreatedDate = DateTimeOffset.UtcNow;

        try
        {
            bool success = await PostStore.CreatePostAsync(this.Post, tagNames);

            if (success)
            {
                OnSuccess("Post created successfully");
            }
            else
            {
                OnError("Failed to create post");
            }
        }
        catch (Exception ex)
        {
            OnError($"Failed to create post: {ex.Message}", ex);
        }
    }

    private void ClearForm()
    {
        Post = new();
        Tags = string.Empty;
        ErrorMessage = null;
        StateHasChanged();
    }

    private void OnSuccess(string message)
    {
        SuccessMessage = message;
        Logger.LogInformation(SuccessMessage);
        ClearForm();
    }

    private void OnError(string message, Exception? exception = null)
    {
        ErrorMessage = message;

        if (exception != null)
        {
            Logger.LogError(exception, message);
        }
        else
        {
            Logger.LogError(message);
        }
    }
}