@page "/archive/{year:int}"
@page "/archive/{year:int}/{month:int}"
@page "/archive/{year:int}/{month:int}/{day:int}"

@using LinkBlog.Contracts
@using LinkBlog.Web.Components.Posts
@using LinkBlog.Web.Services
@attribute [OutputCache(Duration = 5)]

@inject IPostStore PostStore
@inject ILogger<PostsForTag> Logger

<PageTitle>@Caption</PageTitle>

<h1>@Dates</h1>

@if (posts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <PostList Posts="posts" />
}

@code {
    [Parameter]
    public int Year { get; set; }

    [Parameter]
    public int? Month { get; set; }

    [Parameter]
    public int? Day { get; set; }

    private Post[]? posts;

    private string? Caption;
    private string? Dates;

    protected override async Task OnInitializedAsync()
    {
        DateTime startDate;
        DateTime endDate;
        
        if (Day.HasValue && Month.HasValue)
        {
            startDate = new DateTime(Year, Month.Value, Day.Value);
            endDate = startDate.AddDays(1);

            Caption = $"Posts for {startDate:MMMM d, yyyy}";
            Dates = $"{startDate:MMMM d, yyyy}";
        }
        else if (Month.HasValue)
        {
            startDate = new DateTime(Year, Month.Value, 1);
            endDate = startDate.AddMonths(1);

            Caption = $"Posts for {startDate:MMMM yyyy}";
            Dates = $"{startDate:MMMM yyyy}";
        }
        else
        {
            startDate = new DateTime(Year, 1, 1);
            endDate = startDate.AddYears(1);

            Caption = $"Posts for {startDate:yyyy}";
            Dates = $"{startDate:yyyy}";
        }

        IAsyncEnumerable<Post> asyncPosts = PostStore.GetPostsForDateRange(startDate.ToUniversalTime(), endDate.ToUniversalTime());
        List<Post> posts = new List<Post>();
        await foreach (var post in asyncPosts)
        {
            if (post != null)
            {
                posts.Add(post);
            }
        }

        this.posts = posts.ToArray();
    }
}
