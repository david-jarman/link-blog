@page "/archive/{year:int}"
@page "/archive/{year:int}/{month:int}"
@page "/archive/{year:int}/{month:int}/{day:int}"
@page "/archive/{year:int}/{month:int}/{day:int}/{shortTitle}"

@using LinkBlog.Data
@using LinkBlog.Web.Components.Posts
@attribute [OutputCache(Duration = 5)]

@inject IPostStore PostStore
@inject ILogger<PostsForTag> Logger

<PageTitle>@Caption</PageTitle>

@if (HeaderTitle != null)
{
    <h1>@HeaderTitle</h1>
}

@if (posts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <PostList Posts="posts" />
}

@code {
    [Parameter]
    public int Year { get; set; }

    [Parameter]
    public int? Month { get; set; }

    [Parameter]
    public int? Day { get; set; }

    [Parameter]
    public string? ShortTitle { get; set; }

    private PostEntity[]? posts;

    private string? Caption;
    private string? HeaderTitle;

    protected override async Task OnInitializedAsync()
    {
        DateTimeOffset startDate;
        DateTimeOffset endDate;
        
        if (Day.HasValue && Month.HasValue)
        {
            // Assume the date provided is in pacific standard time. Convert to UTC.
            var startTime = new DateTime(Year, Month.Value, Day.Value);

            // Define the Pacific Time Zone
            TimeZoneInfo pacificZone = TimeZoneInfo.FindSystemTimeZoneById("Pacific Standard Time");

            // Specify that the input DateTime is in Pacific Time (make it DateTimeOffset)
            startDate  = new DateTimeOffset(startTime, pacificZone.GetUtcOffset(startTime));
            endDate = startDate.AddDays(1);

            if (ShortTitle == null)
            {
                Caption = $"Posts for {startDate:MMMM d, yyyy}";
                HeaderTitle = $"{startDate:MMMM d, yyyy}";
            }
            else
            {
                PostEntity? post = await this.PostStore.GetPostForDateRangeAndShortTitleAsync(startDate.ToUniversalTime(), endDate.ToUniversalTime(), ShortTitle);
                if (post != null)
                {
                    Caption = post.Title;
                    HeaderTitle = null; // Don't display a header for a single post.
                    this.posts = new PostEntity[] { post };
                    return;
                }
            }
        }
        else if (Month.HasValue)
        {
            startDate = new DateTime(Year, Month.Value, 1);
            endDate = startDate.AddMonths(1);

            Caption = $"Posts for {startDate:MMMM yyyy}";
            HeaderTitle = $"{startDate:MMMM yyyy}";
        }
        else
        {
            startDate = new DateTime(Year, 1, 1);
            endDate = startDate.AddYears(1);

            Caption = $"Posts for {startDate:yyyy}";
            HeaderTitle = $"{startDate:yyyy}";
        }

        IAsyncEnumerable<PostEntity> asyncPosts = PostStore.GetPostsForDateRange(startDate.ToUniversalTime(), endDate.ToUniversalTime());
        List<PostEntity> posts = new List<PostEntity>();
        await foreach (var post in asyncPosts)
        {
            if (post != null)
            {
                posts.Add(post);
            }
        }

        this.posts = posts.ToArray();
    }
}
